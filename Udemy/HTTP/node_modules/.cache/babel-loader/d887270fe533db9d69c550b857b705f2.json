{"ast":null,"code":"var _jsxFileName = \"/Users/a1234/Downloads/01-starting-project/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchMovieHandler();\n  }, [fetchMovie]);\n\n  const fetchMovieHandler = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n      if (!response.ok) throw new Error(\"Something went wrong!\");\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setData(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  };\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, \"Found no movies\");\n  if (data.length > 0) content = /*#__PURE__*/React.createElement(MoviesList, {\n    movies: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 34\n    }\n  });\n  if (error) content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 24\n    }\n  }, error);\n  if (isLoading) content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 28\n    }\n  }, \"Loading...\");\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/a1234/Downloads/01-starting-project/src/App.js"],"names":["React","useEffect","useState","MoviesList","App","data","setData","isLoading","setIsLoading","error","setError","fetchMovieHandler","fetchMovie","response","fetch","ok","Error","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","content","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAK;AACbU,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,CAACC,UAAD,CAFM,CAAT;;AAIA,QAAMD,iBAAiB,GAAG,YAAY;AACpCH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAAD,CAA5B;AACA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AAClB,YAAMX,IAAI,GAAG,MAAMQ,QAAQ,CAACI,IAAT,EAAnB;AAEA,YAAMC,iBAAiB,GAAGb,IAAI,CAACc,OAAL,CAAaC,GAAb,CAAkBC,SAAD,IAAe;AACxD,eAAO;AACLC,UAAAA,EAAE,EAAED,SAAS,CAACE,UADT;AAELC,UAAAA,KAAK,EAAEH,SAAS,CAACG,KAFZ;AAGLC,UAAAA,WAAW,EAAEJ,SAAS,CAACK,aAHlB;AAILC,UAAAA,WAAW,EAAEN,SAAS,CAACO;AAJlB,SAAP;AAMD,OAPyB,CAA1B;AAQAtB,MAAAA,OAAO,CAACY,iBAAD,CAAP;AACD,KAdD,CAcE,OAAOT,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAACD,KAAK,CAACoB,OAAP,CAAR;AACD;;AACDrB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GArBD;;AAuBA,MAAIsB,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAd;AACA,MAAIzB,IAAI,CAAC0B,MAAL,GAAc,CAAlB,EAAqBD,OAAO,gBAAG,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEzB,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAV;AACrB,MAAII,KAAJ,EAAWqB,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIrB,KAAJ,CAAV;AACX,MAAIF,SAAJ,EAAeuB,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAV;AAEf,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEnB,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAUmB,OAAV,CAJF,CADF;AAQD;;AAED,eAAe1B,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(()=> {\n    fetchMovieHandler();\n  }, [fetchMovie]);\n\n  const fetchMovieHandler = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n      if (!response.ok) throw new Error(\"Something went wrong!\");\n      const data = await response.json();\n\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        };\n      });\n      setData(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  };\n\n  let content = <p>Found no movies</p>;\n  if (data.length > 0) content = <MoviesList movies={data} />;\n  if (error) content = <p>{error}</p>;\n  if (isLoading) content = <p>Loading...</p>;\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovieHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}